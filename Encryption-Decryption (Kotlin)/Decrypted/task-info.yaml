type: edu
files:
- name: src/Main.kt
  visible: true
  text: |-
    package encryptdecrypt

    fun main() {
        println("Hello World!")
    }
  learner_created: false
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.SimpleTestCase;

    import java.util.List;

    public class EncryptDecryptTest extends StageTest {

        @Override
        public List<SimpleTestCase> generate() {
            return List.of(
                new SimpleTestCase(
                    "enc\n" +
                        "Welcome to hyperskill!\n" +
                        "5",
                    "\\jqhtrj%yt%m~ujwxpnqq&"),
                new SimpleTestCase(
                    "enc\n" +
                        "Hello\n" +
                        "0",
                    "Hello"),
                new SimpleTestCase(
                    "enc\n" +
                        "012345678\n" +
                        "1",
                    "123456789"),
                new SimpleTestCase(
                    "dec\n" +
                        "\\jqhtrj%yt%m~ujwxpnqq&\n" +
                        "5",
                    "Welcome to hyperskill!"),
                new SimpleTestCase(
                    "dec\n" +
                        "Hello\n" +
                        "0",
                    "Hello"),
                new SimpleTestCase(
                    "dec\n" +
                        "222233334444\n" +
                        "1",
                    "111122223333")
            );
        }
    }
  learner_created: false
- name: src/Encrypt.kt
  visible: true
  text: |-
    package encryptdecrypt

    object Encrypt {
        fun simpleEncrypt() {
            val s = "we found a treasure!"
            val sb = StringBuilder()
            for (element in s) {
                var newChar = element
                if (element.code in 65..90) {
                    val n = 90 - element.code
                    newChar = if (n < 13) {
                        (90 + n).toChar()
                    } else (65 - (25 - n)).toChar()
                } else if (element.code in 97..122) {
                    val n = 122 - element.code
                    newChar = if (n < 13) {
                        (97 + n).toChar()
                    } else (122 - (25 - n)).toChar()
                }
                sb.append(newChar)
            }
            println(sb)
        }

        fun keyEncrypt(s: String, inKey: Int) {
            var key = inKey
            val sb = StringBuilder()
            for (element in s) {
                var newChar = element
                if (element.code in 65..90) {
                    if (element.code + key < 90) {
                        newChar = (element.code + key).toChar()
                    } else {
                        key -= 90 - element.code
                        newChar = (64 + key).toChar()
                    }
                } else if (element.code in 97..122) {
                    newChar = if (element.code + key < 122) {
                        (element.code + key).toChar()
                    } else {
                        val tmpKey = key - (122 - element.code)
                        (96 + tmpKey).toChar()
                    }
                }
                sb.append(newChar)
            }
            println(sb)
        }
    }
  learner_created: true
- name: src/Operation.kt
  visible: true
  learner_created: true
- name: src/Decrypt.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/279/stages/1417/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 09 Apr 2023 14:43:31 UTC"
record: 3
