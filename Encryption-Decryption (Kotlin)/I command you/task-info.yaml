type: edu
files:
- name: src/Main.kt
  visible: true
  text: |-
    package encryptdecrypt

    fun main() {
        println("Hello World!")
    }
  learner_created: false
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-data", "Welcome to hyperskill!"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-data", "Hello"
                    )
                    .setAttach("Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-data", "012345678",
                        "-mode", "enc"
                    )
                    .setAttach("123456789"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-data", "\\jqhtrj%yt%m~ujwxpnqq&",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "0",
                        "-data", "Hi"
                    )
                    .setAttach("Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-data", "222233334444"
                    )
                    .setAttach("111122223333")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            return new CheckResult(reply.trim().equals(clue.trim()));
        }
    }
  learner_created: false
- name: src/Decrypt.kt
  visible: true
  text: |-
    package encryptdecrypt


    object Decrypt {
        fun allKeyDecrypt(cypherText: String, key: Int) {
            val sb = StringBuilder()
            for (element in cypherText) {
                val newChar = (element.code - key).toChar()
                sb.append(newChar)
            }
            println(sb)
        }
    }
  learner_created: true
- name: src/Operation.kt
  visible: true
  text: |-
    package encryptdecrypt

    enum class Operation {
        ENC,
        DEC,
        ;
    }
  learner_created: true
- name: src/Encrypt.kt
  visible: true
  text: |-
    package encryptdecrypt

    object Encrypt {
        fun simpleEncrypt() {
            val s = "we found a treasure!"
            val sb = StringBuilder()
            for (element in s) {
                var newChar = element
                if (element.code in 65..90) {
                    val n = 90 - element.code
                    newChar = if (n < 13) {
                        (90 + n).toChar()
                    } else (65 - (25 - n)).toChar()
                } else if (element.code in 97..122) {
                    val n = 122 - element.code
                    newChar = if (n < 13) {
                        (97 + n).toChar()
                    } else (122 - (25 - n)).toChar()
                }
                sb.append(newChar)
            }
            println(sb)
        }

        fun letterKeyEncrypt(s: String, inKey: Int) {
            var key = inKey
            val sb = StringBuilder()
            for (element in s) {
                var newChar = element
                if (element.code in 65..90) {
                    if (element.code + key < 90) {
                        newChar = (element.code + key).toChar()
                    } else {
                        key -= 90 - element.code
                        newChar = (64 + key).toChar()
                    }
                } else if (element.code in 97..122) {
                    newChar = if (element.code + key < 122) {
                        (element.code + key).toChar()
                    } else {
                        val tmpKey = key - (122 - element.code)
                        (96 + tmpKey).toChar()
                    }
                }
                sb.append(newChar)
            }
            println(sb)
        }

        fun allKeyEncrypt(message: String, key: Int) {
            val sb = java.lang.StringBuilder()
            for (element in message) {
                val newChar = (element.code + key).toChar()
                sb.append(newChar)
            }
            println(sb)
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/279/stages/1418/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 09 Apr 2023 14:47:15 UTC"
record: 4
